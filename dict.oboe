unable_to_open(file): ("unable to open ", file)@printerr;
unable_to_read(file): ("unable to read ", file)@printerr;

is_delim(c:): (
	c == `#`
	|| c == `%`
	|| c == `/`
	|| c == `[` || c == `]`
	|| c == `{` || c == `}`
);

catword(s): (
	n:0,
	(N::s@length; n < N && !(is_delim(s[n])); n+=1) ?*,
	(; n > 1 && s[n-1]@is_Space; n-=1) ?*,
	(n > 0) ? (s <<< n)@println
);

catfile(file, verbose): (
	f:file@open,

	f@is_File ? (
		s:f@fgetln,
		verbose ? (file, " [", s@to_Integer, "]")@printerr,

		(s:f@fgetln; f@eof || f@ferror; s=f@fgetln) !* (
			c::s[0],
			(s@length && !(c@is_Space || is_delim(c))) ? (
				catword(s)
			)
		),

		f@ferror ? unable_to_read file,

		f@close
	;
		unable_to_open file
	)
);

catfiles(file, verbose): (
	f:file@open,

	f@is_File ? (
		(s:f@fgetln; f@eof || f@ferror; s=f@fgetln) !* (
			catfile(s, verbose)
		),

		f@ferror ? unable_to_read file,

		f@close
	;
		unable_to_open file
	)
);

help::"
dict [options] FILE...
options:
	-h, --help           display this help
	-v, --verbose        display file name

Where FILE is the name of the file to be processed. More than one file may be
given; each file will be processed in turn.

If FILE is prefixed with @, then it provides a list of files to be processed,
with one file per line.
";

main(argc, argv) : (
	verbose:0,

	(i:1; i < argc; i+=1) ?* (
		args:argv[i],

		args ?: (
		"-h": "--help": help@printerr;
		"-v": "--verbose": verbose = 1;
		(args[0] == `@`) ? (
			catfiles(args << 1, verbose)
		;
			catfile(args, verbose)
		))
	)
);

main(@argc, @argv);


