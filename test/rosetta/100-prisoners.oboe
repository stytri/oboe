# https://rosettacode.org/wiki/100_prisoners

"libutil"@import;

new_drawer(card_number): (
	[card_number:(=card_number), opened:0]
);

new_prisoner(id): (
	[id:(=id), card_found:0]
);

drawer:[], prisoner:[];

initialize(N): (
	card:[],

	(i:0; i < N; i++) ?* (
		card[i] = i+1
	),
	shuffle(card),

	(i:0; i < N; i++) ?* (
		prisoner[i] = new_prisoner(i+1),
		drawer[i] = new_drawer(card[i])
	)
);

close_drawers(): (
	(i:0; i < drawer@length; i++) ?* (
		drawer[i]opened = 0
	)
);

play(is_random): (
	N:prisoner@length, chances:N/2, chosen:0, found:1,

	(i:0; found && i < N; i++) ?* (
		close_drawers(),

		found = 0,
		chosen = is_random ? (select(N) ; i),
		(j:0; found == 0 && j < chances; j++) ?* (
			drawer[chosen]opened = 1,

			(drawer[chosen]card_number == prisoner[i]id) ? (
				prisoner[i]card_found = 1,
				found = 1
			;
				(is_random || chosen == drawer[chosen]card_number-1) ? (
					(; drawer[chosen]opened; chosen = select(N)) ?*
				;
					chosen = drawer[chosen]card_number-1
				)
			)
		)
	),

	found
);

play_game(number_of_prisoners, games, verbose, is_random): (
	won:0,

	(once:0, i:0; i < games; i++) ?* (
		initialize(number_of_prisoners),

		once = play(is_random),
		won = won + once,

		verbose ? (
			("...Game ", i, "...", once ? ("won" ; "lost"))@println,
			(i:0; i < number_of_prisoners; i++) ?* (
				prisoner[i]@println
			)
		)
	),

	(games, " games played, ", won, " games won : ", ((100.0*won)/games), "%")@println,
);

run(number_of_prisoners, games, verbose): (
	("Playing ", games, " random games...")@println,
	play_game(number_of_prisoners, games, verbose, 1),
	
	("Playing ", games, " optimal games...")@println,
	play_game(number_of_prisoners, games, verbose, 0)
);

run(100, 10000, 0);

