# library of utility functions

"++"(X):(X+=1);
"--"(X):(X-=1);

min(a:,b:): (
	(a < b) ? (a ; b)
);

max(a:,b:): (
	(a > b) ? (a ; b)
);

spad(n, s, c): (
	m:s@length,
	((-m >= m) && (n > m)) ? (
		(-n < n) ? (
			s((-n - m)c)
		;
			((n - m)c)s
		)
	;
		s
	)
);

itos(n, i): (
	s:i@to_String,
	spad(n, s, ` `)
);

ndigits(i:0): (
	n:1,
	(i > 9) ?* (
		i = i/10,
		n++
	),
	n
);

select(N): (
	@rand() // N
);

shuffle(a): (
	(t:, i:, n:a@length; n > 0) ?* (
		i = select(n),
		n--,
		(n <> i) ? (
			a[n] >< a[i]
		)
	),

	a
);

getcmd(): (
	"> "@print, @flush(),
	@getln()
);

calloc(n:): (
	m:[],
	(i:0; i < n; i++) ?* (
		m[i] = 0
	),
	m
);

pqheap(node): [
	length: 0,
	nodes : [
		node
	]
];

pqpush(h, d, cmp): (
	i: h length + 1,
	h(
		(j: i / 2; i > 1 && cmp(nodes[j], d); j /= 2) ?* (
			nodes[i] = nodes[j],
			i = j
		),
		nodes[i] = d,
		length++
	),
);

pqpop(h, cmp): (
	return:(),

	n: h length,
	(n > 0) ? h(
		return = nodes[1],

		nodes[1] = nodes[n],
		length--,

		(i:1, j:, k:; i <> n) ?* (
			k = n,
			j = 2 * i,

			(j <= length && cmp(nodes[k], nodes[j])) ? (
				k = j
			),
			j++,
			(j <= length && cmp(nodes[k], nodes[j])) ? (
				k = j
			),
			nodes[i] = nodes[k],

			i = k
		)
	),

	return
);

