# https://rosettacode.org/wiki/Prime_decomposition

"rosetta/libutil"@import;

primes:[2,3,5,7];

is_prime(n:): (
	return:1;

	(i:0, m:isqr(n), p:; return && (p = primes[i]) <= m; i++) ?* (
		return = (n // p)?
	);

	return
);

extend_primes(n:): (
	(p:primes[primes@length - 1]; (p += 2) <= n) ?* (
		is_prime(p) ? (
			primes[primes@length] = p
		)
	);
	()
);

factors(n:): (
	factors:[];

	n > 1 ? ((
		n > primes[primes@length - 1] ? (
			extend_primes(n)
		);

		(i:0, p:; n && (p = primes[i]) <= n; i++) ?* {
			(k:0; n && n // p == 0; n /= p, k++) ?*;
			k > 0 ? (factors[factors@length] = [p, k])
		}
	);(
		factors[0] = [1, 1]
	));

	factors
);

print_factor(prefix,factor): (
	(prefix, factor[0])@print;
	factor[1] > 1 ? ("**", factor[1])@print
);

print(v,f): (
	v@print;
	print_factor(" = ", f[0]);
	(f@length > 1) ? (
		(i:1..(f@length - 1)) ?* (
			print_factor(" * ", f[i])
		)
	);
	''@println
);

main(argc, argv): (
	argc == 1 ? ((
		arg:[
			argv[0],
			1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
			17,18,19,20,21,22,23,24,25,26,27,28,29,
			101,102,103,104,105,106,107,108,109,110,
			111,112,113,114,115,116,117,118,119,120
		];
		main(arg@length, arg)
	);(
		(i:1..(argc - 1)) ?* {
			v:argv[i]@to_Integer;
			print(v, factors v)
		}
	))
);

main(@argc,@argv)
